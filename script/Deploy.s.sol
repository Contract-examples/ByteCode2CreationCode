// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

import "forge-std/Script.sol";
import "forge-std/console2.sol";
import "../src/Bank.sol";
import "@openzeppelin/contracts/utils/Create2.sol";

contract DeployScript is Script {
    bytes32 constant SALT = bytes32(uint256(0x0000000000000000000000000000000000000000d3bf2663da51c10215000103));

    bytes constant RUNTIME_BYTECODE =
        hex"608060405260043610156100c2575b3615610018575f80fd5b61002061070b565b610028610741565b341561009a57335f52600260205260405f2080549034820180921161006d57555f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7fadde1af4000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f3560e01c8062f55d9d1461068457806312065fe01461066957806327e235e31461026f5780632e1a7d4d146104b05780633f4ba83a146104125780635c975abb146103ee578063715018a6146103725780638456cb59146102e95780638da5cb5b146102b7578063b8ba16fd1461026f578063d0e30db01461025c578063f2fde38b1461018b5763f851a4400361000e5734610187575f60031936011261018757602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b5f80fd5b346101875760206003193601126101875760043573ffffffffffffffffffffffffffffffffffffffff8116809103610187576101c56106bf565b80156102305773ffffffffffffffffffffffffffffffffffffffff5f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b7f1e4fbdf7000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b5f6003193601126101875761002061070b565b346101875760206003193601126101875760043573ffffffffffffffffffffffffffffffffffffffff8116809103610187575f526002602052602060405f2054604051908152f35b34610187575f60031936011261018757602073ffffffffffffffffffffffffffffffffffffffff5f5416604051908152f35b34610187575f600319360112610187576103016106bf565b61030961070b565b740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff5f5416175f557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b34610187575f6003193601126101875761038a6106bf565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610187575f60031936011261018757602060ff5f5460a01c166040519015158152f35b34610187575f6003193601126101875761042a6106bf565b5f5460ff8160a01c1615610488577fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff165f557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b7f8dfc202b000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610187576020600319360112610187576004356104cc61070b565b6104d4610741565b73ffffffffffffffffffffffffffffffffffffffff6001541690813303610641574790818111156106395750905b8161052d575b5f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b814710610609575f80809381935af13d15610604573d67ffffffffffffffff81116105d757604051907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8401160116820182811067ffffffffffffffff8211176105d75760405281525f60203d92013e5b156105af578080610508565b7fd6bda275000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6105a3565b50477fcf479181000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b905090610502565b7f7af19b36000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610187575f60031936011261018757602047604051908152f35b346101875760206003193601126101875760043573ffffffffffffffffffffffffffffffffffffffff81168103610187576106bd6106bf565bff5b73ffffffffffffffffffffffffffffffffffffffff5f541633036106df57565b7f118cdaa7000000000000000000000000000000000000000000000000000000005f523360045260245ffd5b60ff5f5460a01c1661071957565b7fd93c0665000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c61078d5760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d565b7f3ee5aeb5000000000000000000000000000000000000000000000000000000005f5260045ffdfea164736f6c634300081c000a";

    function deriveCreationCode(address initialAdmin) public pure returns (bytes memory) {
        bytes memory constructorCode =
            hex"6080806040523460835733156070575f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180546001600160a01b0319163317905561081390816100888239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fdfe";

        bytes memory constructorArgs = abi.encode(initialAdmin);

        return bytes.concat(constructorCode, RUNTIME_BYTECODE, constructorArgs);
    }

    function deploy(bytes memory _bytecode, bytes32 _salt) public returns (address addr) {
        assembly {
            addr :=
                create2(
                    0, // eth amount
                    add(_bytecode, 0x20), // bytecode start
                    mload(_bytecode), // bytecode length
                    _salt // salt value
                )
            if iszero(extcodesize(addr)) { revert(0, 0) }
        }
    }

    function run() public {
        uint256 deployerPrivateKey = vm.envUint("SEPOLIA_WALLET_PRIVATE_KEY");
        address deployerAddress = vm.addr(deployerPrivateKey);

        vm.startBroadcast(deployerPrivateKey);

        bytes memory creationCode = deriveCreationCode(deployerAddress);

        // https://sepolia.arbiscan.io/address/0x4FcD0520AAeaA4B7A642A3d7b389718A2E63c402#code
        address addr = Create2.deploy(0, SALT, creationCode);
        Bank newBank = Bank(payable(addr));
        console2.log("Bank deployed to:", addr);
        console2.log("Deployed by:", deployerAddress);
        console2.log("Bank balance:", newBank.getBalance());

        vm.stopBroadcast();
    }

    receive() external payable { }
}
